#%RAML 0.8
title: Test REST API in multiple languages...
baseUri: http:/myserver.com/testAPI
version: v1

schemas:
 - person: |
    {
      "type": "object",
      "properties": {
         "id": { "type": "integer" },
         "name": {  "type": "string" },
         "age": { "type": "integer" },
         "bookmarks": {"type": "array" }
    },
      "required": true
    }
 - bookmark: |
     {
      "type": "object",
      "properties": {
         "owner": { "type": "person" },
         "id": {  "type": "integer" },
         "url": { "type": "string" },
         "description": {"type": "string" }
     },
      "required": true
     }  
 
/account:
  description: endpoint that allows client to interact with accounts on the system.
  get:
    description: Retrieves all accounts that have been created.
    responses:
      200:
        body:
          application/json:
            schema: person  
            example: |
              {
                  "name": "User's Name",
                  "age": 33,
                  "id": 1,
                  "bookmarks": null
                },
                {
                  "name": "Another user",
                  "age": 54,
                  "id": 2,
                  "bookmarks": [
                    {
                      "url":"http://www.cnn.com",
                      "description": "Great website for current news",
                      "id": 123456789
                    },
                    {
                      "url": "http://www.cdc.gov",
                      "description": "Best site for Public health information",
                      "id": 123456780
                    }]
                }

  post:
    description: Creates a new Account. ID wil be generated by the server, Name is required.
    body:
      application/json:
        schema: person
        example: |
               {
                  "name": "New User",
                  "age": 87,
                  "id": 7,
                  "bookmarks": null
                }
    responses:
      200:
        description: If the creation was successful, the same object is returned with the ID populated.
        body:
          application/json:
            schema: person
      400:
        description: If the creation was not successful, a 400 (Bad Request) is provided back with a message indicating the type of problem that occurred.
                
                  
  /{user_id}:     
    description: endpoint that allows to manipulate a specific user account. 
    get:
      description: Retrieves a specific account provided by user_id. Ex. /account/1 retrieves account with ID = 1.
      responses:
        200:
          description: returns a object that matches the provided user id.
          body:
            application/json:
              schema: person
              example: |
                {
                  "name": "User 1",
                  "age": 54,
                  "id": 2,
                  "bookmarks": [
                    {
                      "url":"http://www.cnn.com",
                      "description": "Great website for current news",
                      "id": 123456789
                    },
                    {
                      "url": "http://www.cdc.gov",
                      "description": "Best site for Public health information",
                      "id": 123456780
                    }]
                }
        404:
          body:
          description:  If user id passed does not match any existing accounts, a 404 will be provided back to the caller.
            
            
    put:
       description: Updates the given account specified by user_id. (Need to see how to update? only passed attributes, or require all attibutes to be passed? - this can lead to differences on implementation.
       body:
          application/json:
            schema: person
            example: |
               {
                  "name": "name Updated",
                  "age": 55,
                  "id": 2
                }
                
       responses:
        200:
          description: Returns the object that matches the provided user id. with updated results.
          body:
            application/json:
              schema: person
              example: |
                {
                  "name": "name updated",
                  "age": 56,
                  "id": 2
                }          
        404:
          description: Returns a 404 if the provided user id does not match an exisitng account.
        
        400:
          description: Returns a 400 if for some reason the account cannot be updated with the provided data.
                  
    delete:
        description: Deletes the account associated with user id.
        responses:
          200: 
            description: If the delete was successful and account removed.
          404:
            description: If the user id provided does not match any account, a 404 wil be returned.
          
      
    /bookmark:
      description: endpoint that allows to manage a user's bookmarks
      get:   
        description: Retrieves all bookmarks associated with a given user.
        responses:
          200:
            description: If call was successful and the user's bookmarks are being retrieved.
            body:
              application/json:
                schema: bookmark
                example: |
                  {
                    "url": "http://mynewWebsite.com",
                    "description": "My favorite site."
                  },
                  {
                    "url": "http://anotherWebsite.com",
                    "description": "My other favorite site."
                  }
          404:
            description: If user does not have any bookmark yet, or user account no longer exists.
              
                    
      post:
        description: Creates a new bookmark for the provided user id account.
        body:
          application/json:
            schema: bookmark
            example: |
             {
              "url": "http://myBrandNewSite.com",
              "description": "Just found out about this awesome website"
             }
        responses:
          200:
            description: If bookmark is successfully created, a 200 is returned to the user.
            body:
              application/json:
                schema: bookmark
                example: |
                   {
                    "url": "http://myBrandNewSite.com",
                    "description": "Just found out about this awesome website"
                   }
          404:
            description: If the user ID provided does not match a valid account.
          400:  
            description: If the bookmark cannot be created for whatever reason.        
      /{bm_id}:
        description: endpoint that allows to manipulate a specific bookmark for a specific user account. 
        get:
          description: Retrieves a specific bookmark from a specific user.
          responses:
            200:
              description: If call was successful and the user's bookmarks are being retrieved.
              body:
                application/json:
                  schema: bookmark
                  example: |
                    {
                      "url": "http://mynewWebsite.com",
                      "description": "My favorite site."
                      "id": 123456
                    }
            404:
              description: If user does not have any bookmark with the provided bm_id, or user account no longer exists.

        put:
          description: Updates the provided bookmark.
          body:
            application/json:
              schema: bookmark
              example: |
                {
                  "url": "http://mynewWebsite.com/update",
                  "description": "My updated favorite site."
                  "id": 123456
                }
          responses:
            200:
              description: Returns the object that matches the provided user id. with updated results.
              body:
                application/json:
                  schema: person
                  example: |
                    {
                      "url": "http://mynewWebsite.com/update",
                      "description": "My updated favorite site."
                      "id": 123456
                    }
            404:        
              description: If user does not have any bookmark with the provided bm_id, or user account no longer exists.
            400:
              description: Returns a 400 if for some reason the bookmark cannot be updated with the provided data.
                                  
        delete:
          description: Deletes the bookmark that matches id bm_id.
          responses:
            200: 
              description: If the delete was successful and bookmark removed.
            404:
              description: If the user id provided does not match any account or bm_id does not match any bookmark, a 404 wil be returned.
              
        
