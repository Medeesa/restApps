swagger: '2.0'
info:
  title: Test REST API in multiple languages...
  version: v1
securityDefinitions: {}
paths:
  /account:
    get:
      description: Retrieves all accounts that have been created.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/person'
    post:
      description: >-
        Creates a new Account. ID wil be generated by the server, Name is
        required.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/person'
      responses:
        '200':
          description: >-
            If the creation was successful, the same object is returned with the
            ID populated.
          schema:
            $ref: '#/definitions/person'
        '400':
          description: >-
            If the creation was not successful, a 400 (Bad Request) is provided
            back with a message indicating the type of problem that occurred.
  '/account/{user_id}':
    get:
      description: >-
        Retrieves a specific account provided by user_id. Ex. /account/1
        retrieves account with ID = 1.
      responses:
        '200':
          description: returns a object that matches the provided user id.
          schema:
            $ref: '#/definitions/person'
        '404':
          description: >-
            If user id passed does not match any existing accounts, a 404 will
            be provided back to the caller.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
    put:
      description: >-
        Updates the given account specified by user_id. (Need to see how to
        update? only passed attributes, or require all attibutes to be passed? -
        this can lead to differences on implementation.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/person'
      responses:
        '200':
          description: >-
            Returns the object that matches the provided user id. with updated
            results.
          schema:
            $ref: '#/definitions/person'
        '400':
          description: >-
            Returns a 400 if for some reason the account cannot be updated with
            the provided data.
        '404':
          description: >-
            Returns a 404 if the provided user id does not match an exisitng
            account.
    delete:
      description: Deletes the account associated with user id.
      responses:
        '200':
          description: If the delete was successful and account removed.
        '404':
          description: >-
            If the user id provided does not match any account, a 404 wil be
            returned.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
  '/account/{user_id}/bookmark':
    get:
      description: Retrieves all bookmarks associated with a given user.
      responses:
        '200':
          description: If call was successful and the user's bookmarks are being retrieved.
          schema:
            $ref: '#/definitions/bookmark'
        '404':
          description: >-
            If user does not have any bookmark yet, or user account no longer
            exists.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
    post:
      description: Creates a new bookmark for the provided user id account.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/bookmark'
      responses:
        '200':
          description: 'If bookmark is successfully created, a 200 is returned to the user.'
          schema:
            $ref: '#/definitions/bookmark'
        '400':
          description: If the bookmark cannot be created for whatever reason.
        '404':
          description: If the user ID provided does not match a valid account.
  '/account/{user_id}/bookmark/{bm_id}':
    get:
      description: Retrieves a specific bookmark from a specific user.
      responses:
        '200':
          description: If call was successful and the user's bookmarks are being retrieved.
          schema:
            $ref: '#/definitions/bookmark'
        '404':
          description: >-
            If user does not have any bookmark with the provided bm_id, or user
            account no longer exists.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
        - type: string
          name: bm_id
          in: path
          required: true
    put:
      description: Updates the provided bookmark.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
        - type: string
          name: bm_id
          in: path
          required: true
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/bookmark'
      responses:
        '200':
          description: >-
            Returns the object that matches the provided user id. with updated
            results.
          schema:
            $ref: '#/definitions/person'
        '400':
          description: >-
            Returns a 400 if for some reason the bookmark cannot be updated with
            the provided data.
        '404':
          description: >-
            If user does not have any bookmark with the provided bm_id, or user
            account no longer exists.
    delete:
      description: Deletes the bookmark that matches id bm_id.
      responses:
        '200':
          description: If the delete was successful and bookmark removed.
        '404':
          description: >-
            If the user id provided does not match any account or bm_id does not
            match any bookmark, a 404 wil be returned.
      parameters:
        - type: string
          name: user_id
          in: path
          required: true
        - type: string
          name: bm_id
          in: path
          required: true
definitions:
  person:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      age:
        type: integer
      bookmarks:
        type: array
  bookmark:
    type: object
    properties:
      owner:
        type: person
      id:
        type: integer
      url:
        type: string
      description:
        type: string
host: ''
basePath: /myserver.com/testAPI
schemes:
  - http
